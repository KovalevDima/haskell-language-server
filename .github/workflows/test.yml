name: Testing

defaults:
  run:
    shell: bash

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - '**'

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      should_skip_ghcide: ${{ steps.skip_ghcide_check.outputs.should_skip }}
      ghcs: ${{ steps.ghcs.outputs.ghcs }}
    steps:
      # Need the repo checked out in order to read the file
      - uses: actions/checkout@v3
      - id: ghcs
        run: echo "ghcs=$(cat ./.github/workflows/supported-ghc-versions.json)" >> $GITHUB_OUTPUT
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          cancel_others: false
          paths_ignore: '[ "**/docs/**"
                         , "**.md"
                         , "**/LICENSE"
                         , "**.nix"
                         , "flake.lock"
                         , "**/README.md"
                         , "FUNDING.yml"
                         , ".circleci/**"
                         , "**/stack*.yaml"
                         , ".gitlab-ci.yaml"
                         , ".gitlab/**"
                         , "CODEOWNERS"
                         ]'
      # If we only change ghcide downstream packages we have not test ghcide itself
      - id: skip_ghcide_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          cancel_others: false
          paths_ignore: '[ "hls-test-utils/**"
                         , "plugins/**"
                         , "src/**"
                         , "exe/**"
                         , "test/**"
                         , "shake-bench/**"
                         ]'

  test:
    if: needs.pre_job.outputs.should_skip != 'true'
    needs:
      - pre_job
    runs-on: ${{ matrix.os }}
    strategy:
      # We don't want to fail fast.
      # We used to fail fast, to avoid caches of failing PRs to overpopulate the CI
      # caches, evicting known good build caches.
      # However, PRs do not cache anything any more, and can only use the caches from current master.
      # See 'caching.yml' for our caching set up.
      fail-fast: false
      matrix:
        ghc: ${{ fromJSON(needs.pre_job.outputs.ghcs) }}
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        # Mark which GHC versions on which platforms we want to test.
        include:
           # Test all supported versions, but only on ubuntu and windows
           - os: ubuntu-latest
             test: true
           - os: windows-latest
             test: true

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-build
        with:
          ghc: ${{ matrix.ghc }}
          os:  ${{ runner.os }}

      - name: Build
        run: cabal build

      - name: Set test options
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: |
          echo "TEST_OPTS=-j1 --rerun-update --rerun-filter failures,exceptions" >> $GITHUB_ENV

      - name: Cache test log between attempts of the same run
        uses: actions/cache@v3
        env:
          cache-name: cache-test-log
        with:
          path: "**/.tasty-rerun-log*"
          key: v1-${{ runner.os }}-${{ matrix.ghc }}-test-log-${{ github.sha }}

      - if: matrix.test
        name: Test hls-graph
        run: cabal test hls-graph --test-options="$TEST_OPTS"

      - if: needs.pre_job.outputs.should_skip_ghcide != 'true' && matrix.test
        name: Test ghcide
        # run the tests without parallelism to avoid running out of memory
        run: cabal test ghcide --test-options="$TEST_OPTS" || cabal test ghcide --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test hls-plugin-api
        run: cabal test hls-plugin-api --test-options="$TEST_OPTS" || cabal test hls-plugin-api --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test func-test suite
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        run: cabal test func-test --test-options="$TEST_OPTS" || cabal test func-test --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test wrapper-test suite
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        run: cabal test wrapper-test --test-options="$TEST_OPTS --rerun-log-file .tasty-rerun-log-wrapper"

      - if: matrix.test
        name: Test refactor-plugin
        run: cabal test refactor-plugin-tests --test-options="$TEST_OPTS" || cabal test refactor-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test 
        name: Test floskell-plugin
        run: cabal test floskell-plugin-tests --test-options="$TEST_OPTS" || cabal test floskell-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test class-plugin
        run: cabal test class-plugin-tests --test-options="$TEST_OPTS" || cabal test class-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test pragmas-plugin
        run: cabal test pragmas-plugin-tests --test-options="$TEST_OPTS" || cabal test pragmas-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test eval-plugin
        run: cabal test eval-plugin-tests --test-options="$TEST_OPTS" || cabal test eval-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test splice-plugin
        run: cabal test splice-plugin-tests --test-options="$TEST_OPTS" || cabal test splice-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test && matrix.ghc != '9.2'
        name: Test stan-plugin
        run: cabal test stan-plugin-tests --test-options="$TEST_OPTS" || cabal test stan-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test stylish-haskell-plugin
        run: cabal test stylish-haskell-plugin-tests --test-options="$TEST_OPTS" || cabal test stylish-haskell-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test 
        name: Test ormolu-plugin
        run: cabal test ormolu-plugin-tests --test-options="$TEST_OPTS" || cabal test ormolu-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test 
        name: Test fourmolu-plugin
        run: cabal test fourmolu-plugin-tests --test-options="$TEST_OPTS" || cabal test fourmolu-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test explicit-imports-plugin test suite
        run: cabal test explicit-imports-plugin-tests --test-options="$TEST_OPTS" || cabal test explicit-imports-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test call-hierarchy-plugin test suite
        run: cabal test call-hierarchy-plugin-tests --test-options="$TEST_OPTS" || cabal test call-hierarchy-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test && matrix.os != 'windows-latest'
        name: Test rename-plugin test suite
        run: cabal test rename-plugin-tests --test-options="$TEST_OPTS" || cabal test rename-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test 
        name: Test hlint-plugin test suite
        run: cabal test hlint-plugin-tests --test-options="$TEST_OPTS" || cabal test hlint-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test module-name-plugin test suite
        run: cabal test module-name-plugin-tests --test-options="$TEST_OPTS" || cabal test module-name-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test alternate-number-format-plugin test suite
        run: cabal test alternate-number-format-plugin-tests --test-options="$TEST_OPTS" || cabal test alternate-number-format-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test qualify-imported-names-plugin test suite
        run: cabal test qualify-imported-names-plugin-tests --test-options="$TEST_OPTS" || cabal test qualify-imported-names-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test code-range-plugin test suite
        run: cabal test code-range-plugin-tests --test-options="$TEST_OPTS" || cabal test code-range-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test change-type-signature test suite
        run: cabal test change-type-signature-plugin-tests --test-options="$TEST_OPTS" || cabal test change-type-signature-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test gadt-plugin test suit
        run: cabal test gadt-plugin-tests --test-options="$TEST_OPTS" || cabal test gadt-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test explicit-fixity-plugin test suite
        run: cabal test explicit-fixity-plugin-tests --test-options="$TEST_OPTS" || cabal test explicit-fixity-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test explicit-record-fields-plugin test suite
        run: cabal test explicit-record-fields-plugin-tests --test-options="$TEST_OPTS" || cabal test explicit-record-fields-plugin-tests --test-options="$TEST_OPTS"

      ## version needs to be limited since the tests depend on cabal-fmt which only builds using specific ghc versions
      - if: matrix.test && matrix.ghc == '9.2'
        name: Test cabal-fmt-plugin test suite
        run: cabal test cabal-fmt-plugin-tests --flag=isolateTests --test-options="$TEST_OPTS" || cabal test cabal-fmt-plugin-tests --flag=isolateTests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test cabal-plugin test suite
        run: cabal test cabal-plugin-tests --test-options="$TEST_OPTS" || cabal test cabal-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test retrie-plugin test suite
        run: cabal test retrie-plugin-tests --test-options="$TEST_OPTS" || cabal test retrie-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test overloaded-record-dot-plugin test suite
        run: cabal test overloaded-record-dot-plugin-tests --test-options="$TEST_OPTS" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test overloaded-record-dot-plugin-tests --test-options="$TEST_OPTS"

      - if: matrix.test
        name: Test semantic-tokens-plugin test suite
        run: cabal test semantic-tokens-plugin-tests --test-options="$TEST_OPTS" || cabal test semantic-tokens-plugin-tests --test-options="$TEST_OPTS"


  test_post_job:
    if: always()
    runs-on: ubuntu-latest
    needs: [pre_job, test]
    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure')
        run: exit 1
      - if: contains(needs.*.result, 'cancelled') && needs.pre_job.outputs.should_skip != 'true'
        run: exit 1
